from flask import Flask, request, jsonify
from flask_cors import CORS
import numpy as np
import tensorflow as tf
import joblib
import os

# üîÅ Ki·ªÉm tra m√¥ h√¨nh c√≥ t·ªìn t·∫°i kh√¥ng
required_files = [
    "model_generator.keras",
    "model_forecaster.keras",
    "scaler_generator.save",
    "scaler_forecaster.save",
    "scaler_fs_output.save"
]

missing_files = [f for f in required_files if not os.path.isfile(f)]
if missing_files:
    raise FileNotFoundError(f"‚ùå Thi·∫øu file m√¥ h√¨nh ho·∫∑c scaler: {missing_files}")

# ‚úÖ Load models v√† scaler
model_gen = tf.keras.models.load_model("model_generator.keras")
model_fore = tf.keras.models.load_model("model_forecaster.keras")
scaler_gen = joblib.load("scaler_generator.save")
scaler_fore = joblib.load("scaler_forecaster.save")
scaler_fs = joblib.load("scaler_fs_output.save")

# ‚úÖ Flask setup
app = Flask(__name__)
CORS(app)

# ‚úÖ G√°n nh√£n theo FS
def classify_fs(fs):
    if fs >= 1.5: return "An to√†n"
    elif fs >= 1.0: return "C√≥ d·∫•u hi·ªáu"
    else: return "Nguy c∆° cao"

# ‚úÖ Trang ch·ªß ki·ªÉm tra nhanh
@app.route('/')
def index():
    return (
        "<h2>‚úÖ Landslide FS Prediction API is running!</h2>"
        "<p>Use <code>POST /predict</code> with JSON:<br>"
        "<code>{ \"features\": [c, L, gamma, h, u, phi, beta, elevation, slope_type] }</code></p>"
        "<p>Or use GET with query string: "
        "<code>?c=...&L=...&gamma=...&h=...&u=...&phi=...&beta=...&elevation=...&slope_type=...</code></p>"
    )

# ‚úÖ D·ª± ƒëo√°n FS
@app.route('/predict', methods=['POST', 'GET'])
def predict():
    try:
        # GET ho·∫∑c POST
        if request.method == 'POST':
            json_data = request.get_json(force=True)
            if not json_data or "features" not in json_data:
                raise ValueError("D·ªØ li·ªáu POST ph·∫£i ch·ª©a tr∆∞·ªùng 'features'")
            features = np.array([json_data["features"]])
        elif request.method == 'GET':
            params = ["c", "L", "gamma", "h", "u", "phi", "beta", "elevation", "slope_type"]
            features = [float(request.args.get(p)) for p in params]
            features = np.array([features])
        else:
            return jsonify({"success": False, "message": "Ch·ªâ h·ªó tr·ª£ POST ho·∫∑c GET"}), 405

        if features.shape[1] != 9:
            raise ValueError(f"S·ªë l∆∞·ª£ng ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá. C·∫ßn 9 gi√° tr·ªã, nh·∫≠n {features.shape[1]}")

        # üîÅ D·ª± ƒëo√°n
        input_scaled = scaler_gen.transform(features)
        sequence = model_gen.predict(input_scaled)
        sequence_lstm = sequence.reshape((1, 1, sequence.shape[1]))
        fs_scaled = model_fore.predict(sequence_lstm)
        fs = scaler_fs.inverse_transform(fs_scaled)[0]

        result = []
        for i, val in enumerate(fs, start=1):
            result.append({
                "day": i,
                "fs": round(float(val), 2),
                "label": classify_fs(val)
            })

        return jsonify({"success": True, "result": result})

    except Exception as e:
        return jsonify({
            "success": False,
            "error": str(e),
            "message": "‚ö†Ô∏è Ki·ªÉm tra ƒë·∫ßu v√†o JSON ho·∫∑c query. ƒê·ªãnh d·∫°ng ph·∫£i gi·ªëng {\"features\": [9 s·ªë]}"
        }), 400

# ‚úÖ Kh√¥ng d√πng d√≤ng n√†y tr√™n Render v√¨ ƒë√£ d√πng Gunicorn
if __name__ == '__main__':
    app.run(debug=True)
